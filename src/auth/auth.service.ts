import {
  BadRequestException,
  Inject,
  Injectable,
  UnauthorizedException,
  InternalServerErrorException,
  NotFoundException,
  ConflictException,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { SignUpDto } from './dto/signupdto';
import { LoginData } from './schema/login.schema';
import { User } from './schema/user.schema';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';
import { error } from 'console';
import { ConfigService } from '@nestjs/config';
import { BookMark } from 'src/posts/schema/bookmark.schema';
import { Follow } from 'src/follow/entities/follow.entity';

@Injectable()
export class AuthService {
  constructor(
    @InjectModel(User.name) private userModel: Model<User>,
    private jwtService: JwtService,
    private configService: ConfigService,
     @InjectModel(BookMark.name) private BookMarkModel: Model<BookMark>,
     @InjectModel(Follow.name) private FollowModel: Model<Follow>,

  ) {}

  async registerUser(signUpData: SignUpDto) {
    try {
      const { name, phone, email, password } = signUpData;

      let user = await this.userModel.findOne({ email });
      if (user) {
        throw new UnauthorizedException('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
      }

      let validPhone = await this.userModel.findOne({ phone });
      if (validPhone) {
        throw new UnauthorizedException('S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
      }

      const hashedPassword = await bcrypt.hash(password, 10);
      const registedUser = await this.userModel.create({
        email,
        password: hashedPassword,
        name,
        phone,
      });
      const savedUser = await registedUser.save();
      // Kh·ªüi t·∫°o bookmark cho ng∆∞·ªùi d√πng m·ªõi
      await this.initializeBookMark(savedUser._id.toString());
      await this.initializeFollow(savedUser._id.toString());

      return {
        message: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng',
      };
    } catch (error) {
      if (error.code === 11000) {
        // L·∫•y tr∆∞·ªùng b·ªã tr√πng
        const field = Object.keys(error.keyValue)[0];
        // L·∫•y gi√° tr·ªã b·ªã tr√πng
        const value = error.keyValue[field];
        throw new ConflictException(
          `Gi√° tr·ªã '${value}' c·ªßa tr∆∞·ªùng '${field}' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng`,
        );
      }
      if (error.code = 401){
        throw new UnauthorizedException(
          'T√†i kho·∫£n ƒë√£ ƒëƒÉng k√≠',
        );
      }
      throw new InternalServerErrorException(
        'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω t√†i kho·∫£n ' + error,
      );
    }
  }

  async loginAsPhone(loginData: LoginData) {
    try {
      const { phone, password } = loginData;
      let user = await this.userModel.findOne({ phone });
      if (!user) {
        throw new UnauthorizedException(
          'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ' + phone + ' ' + password,
        );
      }

      const passwordMatches = await bcrypt.compare(password, user.password);
      if (!passwordMatches) {
        throw new UnauthorizedException('M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c');
      }
      console.log('Ngo√†i if', user.isBanned);
      if (user.isBanned) {
        console.log('Trong if', user.isBanned);
        return {
          accessToken: null,
          message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a',
        };
      }
      const tokens = await this.generateUserTokens(
        user._id,
        user.email,
        user.name,
        user.phone,
        user.role,
      );

      const cacheKey = `user_${user._id}`;
      return {
        accessToken: tokens.accessToken,
        message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      };
    } catch {
      if (error instanceof UnauthorizedException) {
        throw error;
      }
      throw new InternalServerErrorException('ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng nh·∫≠p');
    }
  }

  async loginAsEmail(loginData: LoginData) {
    try {
      console.log('Dang nhap bang email');

      const { email, password } = loginData;
      let user = await this.userModel.findOne({ email });
      console.log('Da tim theo email');

      if (!user) {
        throw new UnauthorizedException(
          'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ' + email + ' ' + password,
        );
      }

      console.log('Co tk co email');
      const passwordMatches = await bcrypt.compare(password, user.password);
      if (!passwordMatches) {
        throw new UnauthorizedException('M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c');
      }
      console.log('dung mat khau');

      if (user.isBanned) {
        console.log('T√†i kho·∫£n ƒë√£ b·ªã kh√≥a');
        return {
          accessToken: null,
          message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a',
        };
      }
      const tokens = await this.generateUserTokens(
        user._id,
        user.email,
        user.name,
        user.phone,
        user.role,
      );
      console.log('Da tao token');

      return {
        accessToken: tokens.accessToken,
        message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      };
    } catch (error) {
      if (error instanceof UnauthorizedException) {
        throw error;
      }
      throw new InternalServerErrorException(
        'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng nh·∫≠p: ' + error.message,
      );
    }
  }

  async generateUserTokens(userId, email, name, phone, role) {
    try {
      const secret = this.configService.get<string>('JWT_SECRET');
      console.log('>> JWT SECRET =', secret);
      const accessToken = this.jwtService.sign(
        { userId, email, name, phone, role },
        { secret, expiresIn: '7d' }, // üëà truy·ªÅn secret tr·ª±c ti·∫øp ƒë·ªÉ test
      );
      console.log('>> accessToken =', accessToken);
      return { accessToken }; // ‚úÖ tr·∫£ v·ªÅ object c√≥ accessToken
    } catch (error) {
      throw new InternalServerErrorException('Kh√¥ng th·ªÉ t·∫°o token truy c·∫≠p');
    }
  }

  // khoi tao bookmark cho user khi user moi dang ky
private async initializeBookMark(userId: string) {
  try {
    const bookmarkRecord = new this.BookMarkModel({
      userId: userId,
      postId: [],
    });
    if(bookmarkRecord) {
      await bookmarkRecord.save();
    }
  } catch (error) {
    console.error('Error initializing bookmark:', error);
    throw new InternalServerErrorException('Failed to initialize bookmark');
  }
}
private async initializeFollow(userId: string) {
  try {
    const FollowRecord = new this.FollowModel({
      userId: userId,
      postId: [],
    });
    if(FollowRecord) {
      await FollowRecord.save();
    }
  } catch (error) {
    console.error('Error initializing bookmark:', error);
    throw new InternalServerErrorException('Failed to initialize bookmark');
  }
}

}
